#include<iostream>
using namespace std;

int maxSubSum(int a[], int left, int right) {

	int sum = 0;
	if (left == right) {
		sum = a[left] > 0 ? a[left] : 0;
	}
	else {

		int center = (left + right) / 2;//情况1,最大字段和全部取左边元素
		int leftSum = maxSubSum(a, left, center);//情况2,最大字段和全部取右边元素
		int rightSum = maxSubSum(a, center + 1, right);

		int s1 = 0;
		int lefts = 0; //情况3  最大子段和横跨中间
		for (int i = center; i >= left; i--)  //求出s1:从中间到左边的最大和 

		{

			lefts += a[i];
			if (lefts > s1) s1 = lefts;
		}

		int s2 = 0;
		int rights = 0;
		for (int i = center + 1; i < right; i++)  //求出s2 从中间到右边的最大和
		{

			rights += a[i];
			if (rights > s2)	s2 = rights;
		}
		sum = s1 + s2;//横跨中间的最大字段和为s1+s2
		if (sum < leftSum) sum = leftSum;
		if (sum < rightSum) sum = rightSum;//取三者的较大者
	}
	return sum;
}

int maxSum(int a[], int n) {
	return maxSubSum(a, 0, n - 1);
}

int main() {

	int a[] = { -2,11,-4,13,-5,-2 };
	for (int i = 0; i < 6; i++)
	{
		cout << a[i] << " ";
	}
	cout << endl;
	cout << "数组a的最大连续子段和为：" << maxSum(a, 6) << endl;
	return 0;
}
