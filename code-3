#include <iostream>
using namespace std;

// 十字链表结点结构体
struct TripleNode {
    int row, col;
    int val;
    TripleNode* down, * right;
    TripleNode(int r, int c, int v) : row(r), col(c), val(v), down(NULL), right(NULL) {}
};

// 十字链表稀疏矩阵类
class SparseMatrix {
private:
    int rows, cols, nums; // 非零元素个数
    TripleNode* head; // 头结点
public:
    SparseMatrix(int r, int c) : rows(r), cols(c), nums(0) {
        head = new TripleNode(-1, -1, 0);
        head->down = head; // 初始化头结点
        head->right = head;
    }

    // 插入一个新结点
    void insert(int row, int col, int val) {
        if (row < 0 || row >= rows || col < 0 || col >= cols) {
            throw "Error: Index out of range!";
        }
        TripleNode* p = head, * q;
        while (p->down != head && p->down->row < row) // 找到要插入行的位置
            p = p->down;
        while (p->right != head && p->right->col < col) // 找到要插入列的位置
            p = p->right;
        if (p->down != head && p->down->row == row && p->right != head && p->right->col == col)
            p->right->val += val; // 如果结点已经存在，直接累加
        else {
            q = new TripleNode(row, col, val);
            q->down = p->down;
            q->right = p->right;
            p->down = q;
            p->right = q;
            nums++; // 非零元素个数加1
        }
    }

    // 关闭十字链表并释放空间
    void close() {
        TripleNode* p, * q;
        for (int i = 0; i < rows; i++) {
            p = head->down; // 依次释放每一行的结点
            head->down = p->down;
            q = p->right;
            while (q != head) {
                p->right = q->right;
                delete q;
                q = p->right;
            }
            delete p;
        }
        delete head;
        rows = cols = nums = 0;
        head = NULL;
    }

    // 稀疏矩阵相加
    SparseMatrix operator+(const SparseMatrix& other) {
        if (rows != other.rows || cols != other.cols)
            throw "Error: Two matrices must have same dimensions!";
        SparseMatrix res(rows, cols);
        TripleNode* p, * q;
        p = head->down; q = other.head->down;
        while (p != head && q != other.head) { // 同时遍历两个矩阵的每一行
            if (p->row == q->row) { // 如果行号相同，进行相加操作
                while (p != head && q != other.head && p->col != -1 && q->col != -1) {
                    if (p->col == q->col) { // 如果列号相同，将两个元素相加
                        res.insert(p->row, p->col, p->val + q->val);
                        p = p->right; q = q->right;
                    }
                    else if (p->col < q->col) { // 如果第一个矩阵的列号小于第二个矩阵的列号，将第一个矩阵的元素插入结果矩阵
                        res.insert(p->row, p->col, p->val);
                        p = p->right;
                    }
                    else { // 如果第二个矩阵的列号小于第一个矩阵的列号，将第二个矩阵的元素插入结果矩阵
                        res.insert(q->row, q->col, q->val);
                        q = q->right;
                    }
                }
                while (p != head && p->col != -1) { // 将第一个矩阵剩余的元素插入结果矩阵
                    res.insert(p->row, p->col, p->val);
                    p = p->right;
                }
                while (q != other.head && q->col != -1) { // 将第二个矩阵剩余的元素插入结果矩阵
                    res.insert(q->row, q->col, q->val);
                    q = q->right;
                }
            }
            else if (p->row < q->row) { // 如果第一个矩阵的行号小于第二个矩阵的行号，将第一个矩阵的元素插入结果矩阵
                while (p != head && p->col != -1) {
                    res.insert(p->row, p->col, p->val);
                    p = p->right;
                }
            }
            else { // 如果第二个矩阵的行号小于第一个矩阵的行号，将第二个矩阵的元素插入结果矩阵
                while (q != other.head && q->col != -1) {
                    res.insert(q->row, q->col, q->val);
                    q = q->right;
                }
            }
        }
        while (p != head) { // 将第一个矩阵剩余的元素插入结果矩阵
            while (p != head && p->col != -1) {
                res.insert(p->row, p->col, p->val);
                p = p->right;
            }
        }
        while (q != other.head) { // 将第二个矩阵剩余的元素插入结果矩阵
            while (q != other.head && q->col != -1) {
                res.insert(q->row, q->col, q->val);
                q = q->right;
            }
        }
        return res;
    }

    // 输出稀疏矩阵
    void print() {
        TripleNode* p = head->down;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (p != head && p->row == i && p->col == j) {
                    cout << p->val << " ";
                    p = p->right;
                }
                else {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }
};

int main() {
    int rows, cols, nums;
    cout << "输入稀疏矩阵A的行数(rows)，列数(cols)，非零元素个数（nums) " << endl;
    cin >> rows >> cols >> nums;
    SparseMatrix A(rows, cols);
    cout << "输入矩阵A的三元组(row,col,value)" << endl;
    for (int i = 0; i < nums; i++) {
        int row, col, val;
        cin >> row >> col >> val;
        A.insert(row, col, val);
    }
    cout << "输入稀疏矩阵B的行数(rows)，列数(cols)，非零元素个数(nums)" << endl;
    cin >> rows >> cols >> nums;
    SparseMatrix B(rows, cols);
    cout << "输入矩阵B的三元组(row,col,value)" << endl;
    for (int i = 0; i < nums; i++) {
        int row, col, val;
        cin >> row >> col >> val;
        B.insert(row, col, val);
    }
    try {
        SparseMatrix C = A + B;
        cout << "输出稀疏矩阵A和稀疏矩阵B相加得到的稀疏矩阵C:" << endl;
        C.print();
    }
    catch (const char* msg) {
        cerr << msg << endl;
    }
    A.close();
    B.close();
    return 0;
}
